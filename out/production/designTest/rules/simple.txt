单一职责原则：
就一个类而言，应该仅有一个引用它变化的原因

开放-封闭原则：软件实体应该可以扩展，但是不可以修改
ASD

面对需求：增加新代码进行-而不是修改现有的代码
实现可维护、可扩展、可服用、灵活性好。

控制反转。

依赖倒转：针对接口编程、不要对实现编程，实现可插拔。
高层模块不应该依赖底层模块。应该都依赖抽象。
抽象不应该依赖细节。细节应该依赖抽象。

里氏代换原则：子类型必须能够替换掉它们的父类型。

迪米特法则：最少知识原则

如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。
通过抽象降低类与类之间耦合。




